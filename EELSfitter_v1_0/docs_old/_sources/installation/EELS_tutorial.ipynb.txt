{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "BSRNNZgoVtPi"
   },
   "source": [
    "# **Zero-Loss Peak Subtraction with Neural Networks**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/LHCfitNikhef/CBL-ML/blob/tutorial/Tutorial/EELS_tutorial.ipynb)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "pQsIRy-waF_C"
   },
   "source": [
    "First of all, let us install and import all the required modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "3I4WpmjXaqMh",
    "outputId": "fd616d47-230c-4f4c-a59b-06751b358cbd"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: ncempy in /Users/jaco/opt/anaconda3/envs/py37/lib/python3.7/site-packages (1.8.0)\n",
      "Requirement already satisfied: scipy in /Users/jaco/opt/anaconda3/envs/py37/lib/python3.7/site-packages (from ncempy) (1.5.2)\n",
      "Requirement already satisfied: matplotlib in /Users/jaco/opt/anaconda3/envs/py37/lib/python3.7/site-packages (from ncempy) (3.3.2)\n",
      "Requirement already satisfied: numpy in /Users/jaco/opt/anaconda3/envs/py37/lib/python3.7/site-packages (from ncempy) (1.19.2)\n",
      "Requirement already satisfied: h5py>=2.9.0 in /Users/jaco/opt/anaconda3/envs/py37/lib/python3.7/site-packages (from ncempy) (2.10.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /Users/jaco/opt/anaconda3/envs/py37/lib/python3.7/site-packages (from matplotlib->ncempy) (1.3.0)\n",
      "Requirement already satisfied: pillow>=6.2.0 in /Users/jaco/opt/anaconda3/envs/py37/lib/python3.7/site-packages (from matplotlib->ncempy) (8.0.1)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /Users/jaco/opt/anaconda3/envs/py37/lib/python3.7/site-packages (from matplotlib->ncempy) (2.8.1)\n",
      "Requirement already satisfied: cycler>=0.10 in /Users/jaco/opt/anaconda3/envs/py37/lib/python3.7/site-packages (from matplotlib->ncempy) (0.10.0)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /Users/jaco/opt/anaconda3/envs/py37/lib/python3.7/site-packages (from matplotlib->ncempy) (2.4.7)\n",
      "Requirement already satisfied: certifi>=2020.06.20 in /Users/jaco/opt/anaconda3/envs/py37/lib/python3.7/site-packages (from matplotlib->ncempy) (2020.12.5)\n",
      "Requirement already satisfied: six in /Users/jaco/opt/anaconda3/envs/py37/lib/python3.7/site-packages (from h5py>=2.9.0->ncempy) (1.15.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install ncempy\n",
    "#!wget https://github.com/LHCfitNikhef/CBL-ML/raw/tutorial/Tutorial/area03-eels-SI-aligned.dm4\n",
    "#!wget https://raw.githubusercontent.com/LHCfitNikhef/CBL-ML/tutorial/Tutorial/imageClass.py\n",
    "#!wget https://raw.githubusercontent.com/LHCfitNikhef/CBL-ML/tutorial/Tutorial/trainZLP.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "XQNv_xu6aQOm"
   },
   "outputs": [],
   "source": [
    "from ncempy.io import dm\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "\n",
    "import imageClass as EELSImage\n",
    "import trainZLP as ZLPnn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this tutorial, we will study a model independent way of subtracting the ZLP from an EELS spectrum.\n",
    "\n",
    "The spectral image can be imported with the lines below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "path_to_dm4 = 'area03-eels-SI-aligned.dm4'\n",
    "im = EELSImage.Spectral_image.load_data(path_to_dm4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "2hg7rObaWQTl"
   },
   "source": [
    "## Plotting the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "full_width, full_height = im.image_shape[1], im.image_shape[0]\n",
    "loc_x, loc_y = int(0.1 * full_width), int(0.15 * full_height)\n",
    "spectrum = im.plot_spectrum(loc_y, loc_x)\n",
    "\n",
    "xmin, width = int(0.1 * full_width), int(0.05 * full_width)\n",
    "ymin, height = int(0.15 * full_height), int(0.05 * full_height)\n",
    "\n",
    "window = np.array([[xmin, width], [ymin, height]])\n",
    "im.show_image(selection = window, pixel_highlight = [loc_x, loc_y])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Smoothing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_zoomed_concat = np.reshape(im.data_zoomed, (-1, im.l))\n",
    "data_smooth = ZLPnn.smooth(data_zoomed_concat, window_len = 10)\n",
    "\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.plot(im.deltaE, im.data_zoomed[-1, -2, :])\n",
    "plt.plot(im.deltaE, data_smooth[-2,:])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def der_spect(image, spectrum):\n",
    "    dx = image.ddeltaE\n",
    "    der_spectrum = (spectrum[:,1:]-spectrum[:,:-1])/dx\n",
    "    return der_spectrum\n",
    "\n",
    "der = der_spect(im, data_smooth)\n",
    "der_smooth = ZLPnn.smooth(der, window_len = 10)\n",
    "\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.plot(im.deltaE[:-1], der_smooth[-1,:])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Finding $dE_1$ and $dE_2$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_avg = np.average(data_smooth, axis=0)\n",
    "der_avg = np.average(der, axis=0)\n",
    "\n",
    "dE1 = ZLPnn.find_dE1(im, der_avg, data_avg, fct=0.7)\n",
    "\n",
    "times_dE1 = 3\n",
    "min_dE2 = im.deltaE.max() - im.ddeltaE*im.l*0.05 # discuss with Isabel\n",
    "dE2 = np.minimum(dE1 * times_dE1, min_dE2) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "select1 = len(im.deltaE[im.deltaE < dE1]) \n",
    "select2 = len(im.deltaE[im.deltaE > dE2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preparing the training data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "epsilon = 1e-3\n",
    "data_zoomed_concat[data_zoomed_concat < 0] = epsilon\n",
    "\n",
    "def rescale(data, mean, std):\n",
    "    return (data - mean) / std\n",
    "\n",
    "deltaE_scaled = rescale(im.deltaE, np.mean(im.deltaE), np.std(im.deltaE))\n",
    "\n",
    "pseudo_x = np.ones(select1 + select2)\n",
    "pseudo_x[:select1] = deltaE_scaled[:select1]\n",
    "pseudo_x[-select2:] = deltaE_scaled[-select2:]\n",
    "\n",
    "data_y = np.log(data_zoomed_concat[0][:select1])\n",
    "data_y = np.append(data_y, np.zeros(select2))\n",
    "\n",
    "ci_low = np.nanpercentile(np.log(data_zoomed_concat), 16, axis=0)\n",
    "ci_high = np.nanpercentile(np.log(data_zoomed_concat), 84, axis=0)\n",
    "sigma = np.absolute(ci_high - ci_low)\n",
    "\n",
    "data_sigma = sigma[:select1]\n",
    "data_sigma = np.append(data_sigma, 0.8 * np.ones(select2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f88c8a47f10>]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(pseudo_x[:select1], data_y[:select1])\n",
    "plt.plot(pseudo_x[-select2:], data_y[-select2:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# add this to the modules\n",
    "\n",
    "\n",
    "ci_low = np.nanpercentile(np.log(data_zoomed_concat), 16, axis=0)\n",
    "ci_high = np.nanpercentile(np.log(data_zoomed_concat), 84, axis=0)\n",
    "sigma = np.absolute(ci_high - ci_low)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Discuss with Isabel: rescale before or after applying dE cuts?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Constructing the Neural Network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2021-06-02 10:25:06.080418 Replica 0, Epoch 1, Training loss 6397.148489023718, Validation loss 11225.951041834369\n",
      "2021-06-02 10:25:06.857805 Replica 0, Epoch 500, Training loss 58.41700803067127, Validation loss 101.51453377462462\n",
      "2021-06-02 10:25:07.581313 Replica 0, Epoch 1000, Training loss 52.99262968733756, Validation loss 89.58826879685203\n",
      "2021-06-02 10:25:08.286325 Replica 0, Epoch 1500, Training loss 52.68930857824417, Validation loss 89.0323407608156\n",
      "2021-06-02 10:25:08.998116 Replica 0, Epoch 2000, Training loss 52.44953566470122, Validation loss 88.6381313829072\n",
      "2021-06-02 10:25:09.794270 Replica 0, Epoch 2500, Training loss 52.256512461781284, Validation loss 88.2900548166441\n",
      "2021-06-02 10:25:10.603543 Replica 0, Epoch 3000, Training loss 52.09884260056629, Validation loss 87.99711944174626\n",
      "2021-06-02 10:25:11.375789 Replica 0, Epoch 3500, Training loss 2.7443762396734335, Validation loss 4.233318961041119\n",
      "2021-06-02 10:25:12.122397 Replica 0, Epoch 4000, Training loss 2.0379246297734577, Validation loss 2.905606214974817\n",
      "2021-06-02 10:25:12.828285 Replica 0, Epoch 4500, Training loss 0.3047092044467526, Validation loss 0.5504977132547548\n",
      "2021-06-02 10:25:13.530739 Replica 0, Epoch 5000, Training loss 0.2058238542845904, Validation loss 0.35462617964489057\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import datetime\n",
    "\n",
    "class MLP(nn.Module):\n",
    "\n",
    "    def __init__(self, num_inputs, num_outputs):\n",
    "        super().__init__()\n",
    "        self.linear1 = nn.Linear(num_inputs, 10)\n",
    "        self.linear2 = nn.Linear(10, 15)\n",
    "        self.linear3 = nn.Linear(15, 5)\n",
    "        self.output = nn.Linear(5, num_outputs)\n",
    "        self.tanh = nn.Tanh()\n",
    "        #self.relu = nn.ReLU()\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.linear1(x)\n",
    "        x = self.tanh(x)\n",
    "        x = self.linear2(x)\n",
    "        x = self.tanh(x)\n",
    "        x = self.linear3(x)\n",
    "        x = self.tanh(x)\n",
    "        x = self.output(x)\n",
    "        return x\n",
    "    \n",
    "def loss_fn(output, target, error):\n",
    "    loss = torch.mean(torch.square((output - target)/error))\n",
    "    return loss\n",
    "\n",
    "# def weight_reset(m):\n",
    "#     if isinstance(m, nn.Linear):\n",
    "#         m.reset_parameters()\n",
    "        \n",
    "        \n",
    "def weights_init(model):\n",
    "    for layer in model.children():\n",
    "        if hasattr(layer, 'reset_parameters'):\n",
    "            layer.reset_parameters()\n",
    "\n",
    "def training_loop(n_rep, n_epochs, optimizer, model, loss_fn):\n",
    "    \n",
    "    #data_x = deltaE_scaled[:select1]\n",
    "    #data_sigma = im.data_unc[:select1]\n",
    "    \n",
    "    for rep in range(n_rep):\n",
    "        \n",
    "        #model.apply(weights_init)\n",
    "        \n",
    "        data_y = np.log(data_zoomed_concat[rep][:select1])\n",
    "        data_y = np.append(data_y, np.zeros(select2))\n",
    "        \n",
    "        #data_y = np.log(data_zoomed_concat[rep][:select1])\n",
    "       \n",
    "        train_x, test_x, train_y, test_y, train_sigma, test_sigma = train_test_split(pseudo_x, data_y, data_sigma, test_size=0.5)\n",
    "\n",
    "        train_x = torch.tensor(train_x).unsqueeze(-1) \n",
    "        test_x = torch.tensor(test_x).unsqueeze(-1) \n",
    "        \n",
    "        train_y = torch.tensor(train_y).unsqueeze(-1)\n",
    "        test_y = torch.tensor(test_y).unsqueeze(-1)\n",
    "        \n",
    "        train_sigma = torch.tensor(train_sigma).unsqueeze(-1)\n",
    "        test_sigma = torch.tensor(test_sigma).unsqueeze(-1)\n",
    "        \n",
    "        validation_loss = []\n",
    "        training_loss = []\n",
    "        loss_val_old = 0\n",
    "        overfit_counter = 0\n",
    "        patience = 10000\n",
    "        for epoch in range(1, n_epochs + 1):\n",
    "            \n",
    "            loss_train = 0.0\n",
    "            loss_val = 0.0\n",
    "            \n",
    "            model_output = model(train_x.float())\n",
    "            \n",
    "            loss = loss_fn(model_output, train_y, train_sigma)\n",
    "            \n",
    "            optimizer.zero_grad()\n",
    "            \n",
    "            loss.backward()\n",
    "            \n",
    "            optimizer.step()\n",
    "            \n",
    "            loss_train += loss.item()\n",
    "            training_loss.append(loss_train)\n",
    "        \n",
    "            #validation loss\n",
    "            \n",
    "            with torch.no_grad():\n",
    "                model_output = model(test_x.float())\n",
    "                val_loss = loss_fn(model_output, test_y, test_sigma)\n",
    "                loss_val += val_loss.item()\n",
    "                validation_loss.append(loss_val)\n",
    "                assert val_loss.requires_grad == False\n",
    "\n",
    "#             model.eval()\n",
    "#             with torch.no_grad():\n",
    "#                 loss_val = 0.0\n",
    "#                 model_output = model(test_x.float())\n",
    "#                 loss = loss_fn(model_output, test_y, test_sigma)\n",
    "                \n",
    "#                 #assert loss_val.requires_grad is False\n",
    "#                 loss_val += loss.item()\n",
    "#                 validation_loss.append(loss_val)\n",
    "             \n",
    "#             if loss_val > loss_val_old and epoch > 1:\n",
    "#                 overfit_counter += 1\n",
    "                \n",
    "#             if overfit_counter == patience:\n",
    "#                 torch.save(model.state_dict(), './models/trained_nn_rep_{}.pt'.format(rep))\n",
    "#                 print(loss_train, epoch)\n",
    "#                 break\n",
    "                \n",
    "#             loss_val_old = loss_val\n",
    "            \n",
    "            if epoch == 1 or epoch % 500 == 0:\n",
    "                print('{} Replica {}, Epoch {}, Training loss {}, Validation loss {}'.format(datetime.datetime.now(), rep, epoch, loss_train, loss_val))\n",
    "        \n",
    "        #print(validation_loss)\n",
    "        torch.save(model.state_dict(), './models/trained_nn_rep_{}.pt'.format(rep))\n",
    "        plt.plot(training_loss)\n",
    "\n",
    "n_rep = im.data_zoomed.shape[0] * im.data_zoomed.shape[1]\n",
    "n_epochs = 5000\n",
    "model = MLP(num_inputs=1, num_outputs=1)\n",
    "optimizer = optim.Adam(model.parameters(), lr=1e-2)                \n",
    "                \n",
    "training_loop(\n",
    "    n_rep = 1,\n",
    "    n_epochs = n_epochs,\n",
    "    optimizer = optimizer,\n",
    "    model = model,\n",
    "    loss_fn = loss_fn\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Play with different optimizers/architectures/learning rates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "network_path = './models/trained_nn_rep_0.pt'\n",
    "model.load_state_dict(torch.load(network_path))\n",
    "\n",
    "#data_x = deltaE_scaled[:select1]\n",
    "pseudo_x = torch.tensor(pseudo_x).unsqueeze(-1)\n",
    "\n",
    "model_pred = model.forward(pseudo_x.float())\n",
    "model_pred = model_pred.detach().numpy()\n",
    "\n",
    "plt.plot(pseudo_x, data_y)\n",
    "plt.plot(pseudo_x, model_pred)\n",
    "#plt.plot(deltaE_scaled[:select1], np.log(im.data_zoomed_concat[0][:select1]))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training report"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot of loss\n",
    "validation set\n",
    "adding dE2\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluating the trained models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'data_x' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-14-7896f1afc797>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_state_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnetwork_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m     \u001b[0mmodel_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_x\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m     \u001b[0mmodel_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel_pred\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdetach\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0mpred\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_pred\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'data_x' is not defined"
     ]
    }
   ],
   "source": [
    "pred = []\n",
    "\n",
    "for rep in range(0,n_rep):\n",
    "    network_path = './models/trained_nn_rep_{}.pt'.format(rep)\n",
    "    model.load_state_dict(torch.load(network_path))\n",
    "    \n",
    "    model_pred = model.forward(data_x.float())\n",
    "    model_pred = model_pred.detach().numpy()\n",
    "    pred.append(model_pred[:,0])\n",
    "\n",
    "pred = np.array(pred)\n",
    "pred_median = np.median(pred, axis=0)\n",
    "cl_low = np.nanpercentile(pred, 16, axis=0)\n",
    "cl_high = np.nanpercentile(pred, 84, axis=0)\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "ax = plt.subplot(111)\n",
    "plt.plot(deltaE_scaled[:select1], pred_median)\n",
    "ax.fill_between(deltaE_scaled[:select1], cl_low, cl_high, alpha = 0.3)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Discuss with Isabel: pretrained models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "nPjkV5ExW2Wb"
   },
   "source": [
    "## ZLP subtraction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(10,6))\n",
    "plt.plot(im.deltaE, data_zoomed_concat[-2], linestyle='dashed', label='original', color='k')\n",
    "plt.fill_between(im.deltaE[:select1], np.exp(cl_low), np.exp(cl_high), alpha = 0.4, label='ZLP', color='C1')\n",
    "plt.plot(im.deltaE[:select1], np.exp(pred_median), linestyle = 'dashed', color='C1')\n",
    "plt.plot(im.deltaE[:select1], data_zoomed_concat[0][:select1]-np.exp(pred_median), linestyle='dashed')\n",
    "plt.fill_between(im.deltaE[:select1], data_zoomed_concat[0][:select1] - np.exp(cl_low), data_zoomed_concat[0][:select1] - np.exp(cl_high), alpha = 0.4, label='subtracted', color='C0')\n",
    "plt.xlim(-1.2, 4.5)\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "06jj40QZXKU8"
   },
   "source": [
    "## Bandgap fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "EELS_tutorial.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "PyCharm (tutorial_notebooks)",
   "language": "python",
   "name": "pycharm-d110f80d"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
